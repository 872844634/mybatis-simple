<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Config 3.0 //EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="zxl.mybatis.simple.mapper.UserMapper">
    <cache/>
    <!-- 用于配制Java对象和查询结果列的对应关系-->
    <resultMap id="userMap" type="zxl.mybatis.simple.model.SysUser">
        <id property="id" column="id"></id>
        <result property="userName" column="user_name"></result>
        <result property="userPassword" column="user_password"></result>
        <result property="userEmail" column="user_email"></result>
        <result property="userInfo" column="user_info"></result>
        <result property="headImg" column="head_img" jdbcType="BLOB"></result>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"></result>
    </resultMap>


    <select id="selectById" resultMap="userMap">
        select * from sys_user where id = #{id}
    </select>

    <select id="selectByUserInfo" resultType="SysUser">
        select * from sys_user where user_info = #{userInfo}
    </select>

    <select id="selectAll" resultType="SysUser">
        select id,
        user_name userName,
        user_password userPassword,
        user_email userEmail,
        user_info userInfo,
        head_img headImg,
        create_time createTime
        from sys_user
    </select>

    <select id="selectAllMapUnderscore" resultType="SysUser">
        select * from sys_user
    </select>

    <select id="selectRoleByUserId1" resultType="SysRole">
        select
          r.id,
          r.role_name,
          r.enabled,
          r.create_by,
          r.create_time
          from sys_user u
          left join sys_user_role ur on u.id=ur.user_id
          left join sys_role r on r.id = ur.role_id
          where u.id=#{userId}
    </select>

    <select id="selectRoleByUserId2" resultType="SysRoleExtend">
        select
          r.id,
          r.role_name,
          u.user_name,
          r.enabled,
          r.create_by,
          r.create_time
          from sys_user u
          left join sys_user_role ur on u.id=ur.user_id
          left join sys_role r on r.id = ur.role_id
          where u.id=#{userId}
    </select>
    <!-- 用下面两个别名，则Debug的时候可以查看到具体的对象信息，但是用驼峰的配制就没办法set进去，也就是使用驼峰不能保证其他类的自动封装，只能封装属性，
    as "sysUser.userName",
    as "sysUser.userEmail", -->
    <select id="selectRoleByUserId3" resultType="SysRoleAndUser">
        select
          r.id,
          r.role_name,
          u.user_name "sysUser.userName" ,
          u.user_email "sysUser.userEmail",
          r.enabled,
          r.create_by,
          r.create_time
          from sys_user u
          left join sys_user_role ur on u.id=ur.user_id
          left join sys_role r on r.id = ur.role_id
          where u.id=#{userId}
    </select>

    <insert id="insert">
          insert into sys_user(
          id,user_name,user_password,user_email,user_info,head_img,create_time
          )values(
          #{id},#{userName},#{userPassword},#{userEmail},#{userInfo},
          #{headImg,jdbcType= BLOB},
          #{createTime,jdbcType= TIMESTAMP}
          )
    </insert>

    <!-- mybatis使用JDBC的useGeneratedKeys方法取出由数据库内部生成的主键，将其赋值给keyProperty配制的id属性。当需要设置多个属性的时候，使用逗号分隔开， -->
    <insert id="insert2" useGeneratedKeys="true" keyProperty="id">
          insert into sys_user(
          id,user_name,user_password,
          <if test="userEmail !=null and userEmail !='' ">
          user_email,
          </if>
          user_info,head_img,create_time
          )values(
          #{id},#{userName},#{userPassword},
        <if test="userEmail !=null and userEmail !='' ">
          #{userEmail},
        </if>
        #{userInfo},
          #{headImg,jdbcType= BLOB},
          #{createTime,jdbcType= TIMESTAMP}
          )
    </insert>

    <insert id="insert3" >
          insert into sys_user(
          id,user_name,user_password,user_email,user_info,head_img,create_time
          )values(
          #{id},#{userName},#{userPassword},#{userEmail},#{userInfo},
          #{headImg,jdbcType= BLOB},
          #{createTime,jdbcType= TIMESTAMP}
          )
          <selectKey keyColumn="id" resultType="long" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
          </selectKey>
    </insert>

    <update id="updateById">
        update sys_user
        set user_name=#{userName},
        user_password = #{userPassword},
        user_email = #{userEmail},
        user_info = #{userInfo},
        head_img = #{headImg,jdbcType=BLOB},
        create_time = #{createTime,jdbcType=TIMESTAMP}
        where id = #{id}
    </update>

    <delete id="deleteById">
        delete from sys_user where id = #{id}
    </delete>

    <select id="selectRolesByUserIdAndRoleEnabled" resultType="SysRole">
        select
          r.id,
          r.role_name,
          r.enabled,
          r.create_by,
          r.create_time
          from sys_user u
          left join sys_user_role ur on u.id=ur.user_id
          left join sys_role r on r.id = ur.role_id
          where u.id=#{userId} and r.enabled = #{enabled}
    </select>

<!--    加了where标签 ,就不需要再写where 1=1了-->
    <select id="selectByUser" resultType="SysUser">
        select * from sys_user

        <where>
        <if test=" userName != null and userName != '' ">
            and user_name like concat('%',#{userName},'%')
        </if>
        <if test=" userEmail != null and userEmail != '' ">
            and user_email = #{userEmail}
        </if>
        </where>
    </select>
    <!-- set可以自动插入，不需要再手写set了，且最后一个内容有','也会剔除，但是最后的结尾还是要加id = #{id}, -->
    <update id="updateByIdSelective">
        update sys_user
        <set>
        <if test=" userName != null and userName != '' ">
            user_name = #{userName},
        </if>
        <if test=" userPassword != null and userPassword != '' ">
            user_password = #{userPassword},
        </if>
        <if test=" userEmail != null and userEmail != '' ">
            user_email = #{userEmail},
        </if>
        <if test=" userInfo != null and userInfo != '' ">
            user_info = #{userInfo},
        </if>
        <if test=" headImg != null">
            head_img = #{headImg,jdbcType=BLOB},
        </if>
        <if test=" createTime != null ">
            create_time = #{createTime,jdbcType=TIMESTAMP},
        </if>
        id = #{id},
        </set>
        where id = #{id}
    </update>

    <select id="selectByIdOrUserName" resultType="SysUser">
        select * from sys_user
        where 1=1
        <choose>
            <when test=" id!= null">
                and id = #{id}
            </when>
            <when test="userName !=null and userName != ''">
                and user_name = #{userName}
            </when>
            <otherwise>
                and 1=2
            </otherwise>
        </choose>
    </select>

    <select id="selectByIdList" resultType="SysUser">
        select * from sys_user
        where id in
        <foreach collection="list" open="(" close=")" separator="," item="id" index="i">
            #{id}
        </foreach>
    </select>

    <insert id="insertList" useGeneratedKeys="true" keyProperty="id">
        insert into sys_user(
        user_name,user_password,user_email,user_info,head_img,create_time
        )values
        <foreach collection="list" item="user" separator=",">
        (
          #{user.userName},#{user.userPassword},#{user.userEmail},#{user.userInfo},
          #{user.headImg,jdbcType= BLOB},
          #{user.createTime,jdbcType= TIMESTAMP}
        )
        </foreach>
    </insert>

    <update id="updateByMap">
        update sys_user
        set 
        <foreach collection="_parameter" item="val" index="key" separator=",">
            ${key} = #{val}
        </foreach>
        where id = #{id}
    </update>

    <select id="selectUserAndRoleById" resultType="SysUser">
        select u.*,
               r.id "role.id",
               r.role_name "role.roleName",
               r.enabled "role.enabled",
               r.create_by "role.createBy",
               r.create_time "role.createTime"
         from sys_user u
         inner join sys_user_role ur on u.id = ur.user_id
         inner join sys_role r on ur.role_id = r.id
         where u.id = #{id}
    </select>

    <resultMap id="userRoleMap" extends="userMap" type="SysUser">
        <result property="role.id" column="role_id"></result>
        <result property="role.roleName" column="role_name"></result>
        <result property="role.enabled" column="enabled"></result>
        <result property="role.createBy" column="create_by"></result>
        <result property="role.createTime" column="role_create_time" jdbcType="TIMESTAMP"></result>
    </resultMap>

    <select id="selectUserAndRoleById2" resultMap="userRoleMap">
        select u.*,
               r.id role_id,
               r.role_name ,
               r.enabled enabled,
               r.create_by create_by,
               r.create_time role_create_time
         from sys_user u
         inner join sys_user_role ur on u.id = ur.user_id
         inner join sys_role r on ur.role_id = r.id
         where u.id = #{id}
    </select>



    <resultMap id="userRoleMap1" extends="userMap" type="SysUser">
        <association property="role" columnPrefix="role_" resultMap="zxl.mybatis.simple.mapper.RoleMapper.roleMap"/>
    </resultMap>

    <select id="selectUserAndRoleById3" resultMap="userRoleMap1">
        select u.*,
               r.id role_id,
               r.role_name role_role_name,
               r.enabled role_enabled,
               r.create_by role_create_by,
               r.create_time role_create_time
         from sys_user u
         inner join sys_user_role ur on u.id = ur.user_id
         inner join sys_role r on ur.role_id = r.id
         where u.id = #{id}
    </select>

    <resultMap id="userRoleMapSelect" extends="userMap" type="SysUser">
        <!-- fetchType="lazy" 配制为懒加载 -->
        <association property="role" fetchType="lazy"
                     select="zxl.mybatis.simple.mapper.RoleMapper.selectRoleById"
                     column="{id= role_id}"/>
    </resultMap>

    <select id="selectUserAndRoleByIdSelect" resultMap="userRoleMapSelect">
         select u.*,ur.role_id
         from sys_user u
         inner join sys_user_role ur on u.id = ur.user_id
         where u.id = #{id}
    </select>



    <resultMap id="userRoleListMap" extends="userMap" type="SysUser">
        <collection property="roleList" columnPrefix="role_"
                    resultMap="zxl.mybatis.simple.mapper.RoleMapper.rolePrivilegeListMap"/>
    </resultMap>

    <select id="selectAllUserAndRoles" resultMap="userRoleListMap">
        select u.*,
               r.id role_id,
               r.role_name role_role_name,
               r.enabled role_enabled,
               r.create_by role_create_by,
               r.create_time role_create_time,
               p.id role_privilege_id,
               p.privilege_name role_privilege_privilege_name,
               p.privilege_url role_privilege_privilege_url
         from sys_user u
         inner join sys_user_role ur on u.id = ur.user_id
         inner join sys_role r on ur.role_id = r.id
         inner join sys_role_privilege rp on rp.role_id = r.id
         inner join sys_privilege p on p.id = rp.privilege_id
  </select>

    <select id="selectUserById" statementType="CALLABLE" useCache="false">
        {call select_user_by_id(
            #{id,mode=IN},
            #{userName,mode=OUT,jdbcType=VARCHAR},
            #{userPassword,mode=OUT,jdbcType=VARCHAR},
            #{userEmail,mode=OUT,jdbcType=VARCHAR},
            #{userInfo,mode=OUT,jdbcType=VARCHAR},
            #{headImg,mode=OUT,jdbcType=BLOB,javaType=_byte[]},
            #{createTime,mode=OUT,jdbcType=TIMESTAMP}
        )}
    </select>

    <select id="selectUserPage" statementType="CALLABLE" useCache="false" resultMap="userMap">
        {call select_user_page(
            #{userName,mode=IN},
            #{offset,mode=IN},
            #{limit,mode=IN},
            #{total,mode=OUT,jdbcType=BIGINT}
        )}
    </select>

    <insert id="insertUserAndRoles" statementType="CALLABLE">
        {call insert_user_and_roles(
            #{user.id,mode=OUT,jdbcType=BIGINT},
            #{user.userName,mode=IN},
            #{user.userPassword,mode=IN},
            #{user.userEmail,mode=IN},
            #{user.userInfo,mode=IN},
            #{user.headImg,mode=IN,jdbcType=BLOB},
            #{user.createTime,mode=OUT,jdbcType=TIMESTAMP},
            #{roleIds,mode=IN}
        )}
    </insert>

    <delete id="deleteByUserId" statementType="CALLABLE">
        {call delete_user_by_id(#{id,mode=IN})}
    </delete>
</mapper>